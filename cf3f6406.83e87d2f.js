(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{178:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return m}));var n=r(0),s=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var u=s.a.createContext({}),d=function(e){var t=s.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=d(e.components);return s.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},b=s.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=d(r),b=n,m=l["".concat(i,".").concat(b)]||l[b]||p[b]||a;return r?s.a.createElement(m,o(o({ref:t},u),{},{components:r})):s.a.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var u=2;u<a;u++)i[u]=r[u];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},66:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return o})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return d}));var n=r(2),s=r(6),a=(r(0),r(178)),i={},o={unversionedId:"js/features/odata/common/batch/retrieve-request",id:"js/features/odata/common/batch/retrieve-request",isDocsHomePage:!1,title:"retrieve-request",description:"A retrieve request is any HTTP GET request - in terms of the SAP Cloud SDK this includes all requests built by a GetAllRequestBuilder and GetByKeyRequestBuilder.",source:"@site/docs/js/features/odata/common/batch/retrieve-request.mdx",slug:"/js/features/odata/common/batch/retrieve-request",permalink:"/cloud-sdk/docs/js/features/odata/common/batch/retrieve-request",editUrl:"https://github.com/SAP/cloud-sdk/edit/documentation/docs/js/features/odata/common/batch/retrieve-request.mdx",version:"current",lastUpdatedBy:"Frank Essenberger",lastUpdatedAt:1601906093},c=[],u={rightToc:c};function d(e){var t=e.components,r=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"A retrieve request is any HTTP ",Object(a.b)("inlineCode",{parentName:"p"},"GET")," request - in terms of the SAP Cloud SDK this includes all requests built by a ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"#getall-request-builder"}),"GetAllRequestBuilder")," and ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"#getbykey-request-builder"}),"GetByKeyRequestBuilder"),"."),Object(a.b)("p",null,"In the example below, a list of addresses is mapped in a ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"#getbykey-request-builder"}),"GetByKeyRequestBuilder")," to form the read requests, which are then passed to the batch function."),Object(a.b)("p",null,"The batch request will return a list of ",Object(a.b)("inlineCode",{parentName:"p"},"BatchResponse")," items, which will be stored in the ",Object(a.b)("inlineCode",{parentName:"p"},"retrieveResponses")," variable. These ",Object(a.b)("inlineCode",{parentName:"p"},"BatchResponse")," items need to be parsed and converted to the expected entities."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ReadResponse")," contains an HTTP code, a body, an entity (in this case ",Object(a.b)("inlineCode",{parentName:"p"},"BusinessPartnerAddress"),"), and functions like ",Object(a.b)("inlineCode",{parentName:"p"},"as")," to convert the response into the entity and ",Object(a.b)("inlineCode",{parentName:"p"},"isSuccess"),"."),Object(a.b)("p",null,"The reduce function converts each of the ReadResponses to a BusinessPartnerAddress using the ",Object(a.b)("inlineCode",{parentName:"p"},"as")," function. The ",Object(a.b)("inlineCode",{parentName:"p"},"addresses")," variable is the accumulator and the ",Object(a.b)("inlineCode",{parentName:"p"},"[]")," is the initial value. We end up with a list of BusinessPartnerAddress."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"async getAddresses(businessPartnerAddresses: BusinessPartnerAddress[])\n:Promise<BusinessPartnerAddress[]> {\n  const retrieveRequests = businessPartnerAddresses.map(\n      address => BusinessPartnerAddress\n        .requestBuilder()\n        .getByKey(address.businessPartner, address.addressId)\n  );\n\n  const retrieveResponses = await batch(...retrieveRequests)\n    .execute(destination);\n\n  return retrieveResponses.reduce(\n    (addresses, response: ReadResponse) =>\n      [...addresses, ...response.as(BusinessPartnerAddress)]\n      , []\n  );\n}\n")))}d.isMDXComponent=!0}}]);