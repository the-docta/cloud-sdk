(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{176:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),d=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=d(n),b=a,h=p["".concat(o,".").concat(b)]||p[b]||l[b]||s;return n?r.a.createElement(h,i(i({ref:t},u),{},{components:n})):r.a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},54:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),s=(n(0),n(176)),o={},i={unversionedId:"js/features/odata/common/batch/change-set",id:"js/features/odata/common/batch/change-set",isDocsHomePage:!1,title:"change-set",description:"A changeset is a collection of HTTP POST, PUT, PATCH and DELETE operations - requests built by any CreateRequestBuilder, UpdateRequestBuilder and DeleteRequestBuilder in terms of the SAP Cloud SDK. The order of execution within a changeset is not defined as opposed to the whole batch request itself. Therefore the requests within a changeset should not depend on each other. If the execution of any of the requests within a changeset fails, the whole changeset will be reflected as an error in the response and will not be applied, much like a database transaction.",source:"@site/docs/js/features/odata/common/batch/change-set.mdx",slug:"/js/features/odata/common/batch/change-set",permalink:"/cloud-sdk/docs/js/features/odata/common/batch/change-set",editUrl:"https://github.com/SAP/cloud-sdk/edit/documentation/docs/js/features/odata/common/batch/change-set.mdx",version:"current",lastUpdatedBy:"Frank Essenberger",lastUpdatedAt:1601906093},c=[],u={rightToc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"A changeset is a collection of HTTP ",Object(s.b)("inlineCode",{parentName:"p"},"POST"),", ",Object(s.b)("inlineCode",{parentName:"p"},"PUT"),", ",Object(s.b)("inlineCode",{parentName:"p"},"PATCH")," and ",Object(s.b)("inlineCode",{parentName:"p"},"DELETE")," operations - requests built by any ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#create-request-builder"}),"CreateRequestBuilder"),", ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#update-request-builder"}),"UpdateRequestBuilder")," and ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#delete-request-builder"}),"DeleteRequestBuilder")," in terms of the SAP Cloud SDK. The order of execution within a changeset is not defined as opposed to the whole batch request itself. Therefore the requests within a changeset should not depend on each other. If the execution of any of the requests within a changeset fails, the whole changeset will be reflected as an error in the response and will not be applied, much like a database transaction."),Object(s.b)("p",null,"In the example below, a list of addresses is mapped in an ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#update-request-builder"}),"UpdateRequestBuilder")," to form the update requests, which are then wrapped in a changeset and passed to the batch function."),Object(s.b)("p",null,"The batch request will return a single ",Object(s.b)("inlineCode",{parentName:"p"},"BatchResponse")," in a list, which is stored in the ",Object(s.b)("inlineCode",{parentName:"p"},"updateChangesetResponse")," variable."),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"WriteResponses")," contains the function ",Object(s.b)("inlineCode",{parentName:"p"},"isSuccess")," and the property ",Object(s.b)("inlineCode",{parentName:"p"},"responses")," which is a list of ",Object(s.b)("inlineCode",{parentName:"p"},"WriteResponse")," which contains an HTTP code, and can contain a body, an entity (in this case ",Object(s.b)("inlineCode",{parentName:"p"},"BusinessPartnerAddress"),") and the function ",Object(s.b)("inlineCode",{parentName:"p"},"as")," to convert the response into the entity."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"updateAddresses(businessPartnerAddresses: BusinessPartnerAddress[])\n:Promise<BusinessPartnerAddress[]> {\n  const updateRequests = businessPartnerAddresses.map(\n    address => BusinessPartnerAddress\n      .requestBuilder()\n      .update(address)\n  );\n\n  const [updateChangesetResponse] = await batch(changeset(...updateRequests))\n    .execute(destination);\n\n  return (updateChangesetResponse as WriteResponses)\n    .responses\n    .map(\n      response => response.as(BusinessPartnerAddress)\n    );\n}\n")))}d.isMDXComponent=!0}}]);